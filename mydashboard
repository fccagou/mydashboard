#!/usr/bin/env python3
# -*- encoding: utf-8 -*-
"""
Local Dashboard for easy configuration.

The aim is to give access for some tools from webbrowser

- Read commande list from config files

  - system config
  - user config

- Access from web page
- application runs with user right
- Allow use to add own application
- Can run graphical applications



"""

from __future__ import print_function

import os
import re
import ssl
import sys
import json
import stat
import time
import errno
import signal
import logging
import mimetypes
import subprocess
import wsgiref.simple_server as server

# -----------------------------------------------------------------
# Informational functions.
# -----------------------------------------------------------------

# Will be redefined as MyConfig next
# but needed for error function
config = None


def log(msg):
    global config
    if config is not None and config.verbose:
        print("[+] - ", msg)
    else:
        pass


def info(msg):
    global config
    if config is not None and config.verbose:
        print("[i] - ", msg)
    else:
        pass


def warning(msg):
    global config
    if config is not None and config.verbose:
        print("[!] - ", msg)
    else:
        pass


def error(msg):
    global config
    if config is not None and config.verbose:
        print("[-] - ", msg)
    else:
        pass


def debug(msg):
    global config
    if config is not None and config.debuging:
        logging.debug(msg)


# -----------------------------------------------------------------
#  python wrapper
# -----------------------------------------------------------------
try:
    # For Python 3.0 and later
    from urllib.request import urlopen

    MYURLOPEN = lambda url, timeout, context: urlopen(
        url=url, timeout=timeout, context=context
    )
    from urllib.parse import parse_qs
except ImportError:
    # Fall back to Python 2's urllib2
    from urllib2 import urlopen

    MYURLOPEN = lambda url, timeout, context: urlopen(url=url, timeout=timeout)
    from urllib2.parse import parse_qs


def wsgi_to_bytes(str2convert):
    """
    Because of https://www.python.org/dev/peps/pep-3333/#unicode-issues
    """
    return str2convert.encode("iso-8859-1")


# -----------------------------------------------------------------
# Manage Token
# -----------------------------------------------------------------


try:
    from secrets import token_hex
except:
    # Code from lib/secrets.py
    # https://github.com/python/cpython/blob/3.6/Lib/secrets.py
    #
    import binascii

    DEFAULT_ENTROPY = 32  # number of bytes to return by default

    def token_bytes(nbytes=None):
        """Return a random byte string containing *nbytes* bytes.
        If *nbytes* is ``None`` or not supplied, a reasonable
        default is used.
        >>> token_bytes(16)  #doctest:+SKIP
        b'\\xebr\\x17D*t\\xae\\xd4\\xe3S\\xb6\\xe2\\xebP1\\x8b'
        """
        if nbytes is None:
            nbytes = DEFAULT_ENTROPY
        return os.urandom(nbytes)

    def token_hex(nbytes=None):
        """Return a random text string, in hexadecimal.
        The string has *nbytes* random bytes, each byte converted to two
        hex digits.  If *nbytes* is ``None`` or not supplied, a reasonable
        default is used.
        >>> token_hex(16)  #doctest:+SKIP
        'f9bf78b9a18ce6d46a0cd2b0b86df9da'
        """
        return binascii.hexlify(token_bytes(nbytes)).decode("ascii")


class Token:
    """Classe used to manage token file"""

    def __init__(self, value=False, filename="~/.mydashboard", size=16):
        self.size = size
        if value:
            self.value = value
        else:
            self.value = ""
            self.new()

        self.filename = os.path.abspath(os.path.expanduser(filename))

    def get(self):
        return self.value

    def new(self):
        self.value = token_hex(self.size)
        return self.value

    def save(self):
        try:
            with open(self.filename, "w") as f:
                f.write(str(self.value))
        except:
            error("unable to write token in file %s" % self.filename)
            return False

        try:
            os.chmod(self.filename, stat.S_IRUSR | stat.S_IWUSR)
        except:
            error("Unable to set rights 600 on file %s" % self.filename)
            return False

        return True

    def sync(self):
        try:
            with open(self.filename, "r") as f:
                self.value = f.readlines()[0]
            return True
        except:
            warning("unable to read token from file %s" % self.filename)
            # TODO: make exception
            return False


# -----------------------------------------------------------------
# GLOBAL CONFIG
# -----------------------------------------------------------------


class Remotes:
    """
    Manage remotes downloaded by uri.
    Data are in json format.
    """

    def __init__(self, uri=None):
        self.remote_uri = uri
        self.remotes = {}
        self.load()

    def load(self):
        if self.uri is not None:
            self.remotes = json.loads(open(self.remote_uri, "r").read())

    @property
    def hosts(self):
        return self.remotes["hosts"]

    @property
    def defaults_configuration_by_protocol(self):
        return self.remotes["configuration"]["default_config_by_protocol"]

    @property
    def defaults_configuration_by_site(self):
        return self.remotes["configuration"]["sites"]

    @property
    def uri(self):
        return self.remote_uri

    @property
    def get_formatting_order(self):
        sites_configuration = self.defaults_configuration_by_site
        ordering = {}
        for site_name in sites_configuration:
            if "order" in sites_configuration[site_name]:
                ordering[site_name] = {
                    "order": sites_configuration[site_name]["order"],
                    "domains": {},
                }
                for domain_name in sites_configuration[site_name]["domains"]:
                    if (
                        "order"
                        in sites_configuration[site_name]["domains"][domain_name]
                    ):
                        ordering[site_name]["domains"][domain_name] = {
                            "order": sites_configuration[site_name]["domains"][
                                domain_name
                            ]["order"],
                            "groups": {},
                        }
                        for group_name in sites_configuration[site_name]["domains"][
                            domain_name
                        ]["groups"]:
                            if (
                                "order"
                                in sites_configuration[site_name]["domains"][
                                    domain_name
                                ]["groups"][group_name]
                            ):
                                ordering[site_name]["domains"][domain_name]["groups"][
                                    group_name
                                ] = {
                                    "order": sites_configuration[site_name]["domains"][
                                        domain_name
                                    ]["groups"][group_name]["order"]
                                }
        return ordering

    @uri.setter
    def uri(self, uri=None):
        if self.remote_uri != uri:
            self.remote_uri = uri
            self.load()

    def search(self, host_name=None):
        # TODO; add filters
        if host_name is None:
            return self.hosts

        return filter(lambda h: h["name"] == host_name, self.hosts)

    def find_by_uuid(self, uuid):
        try:
            return next(h for h in self.hosts if h["uuid"] == uuid)
        except StopIteration:
            return None

    def get_configuration_protcol(self, uuid):
        host = self.find_by_uuid(uuid)
        if host is None:
            return {}
        site = host["config"]["site"]
        domain = host["config"]["domain"]
        group = host["config"]["group"]
        protocol = host["config"]["proto"]

        config = {}
        # Merge default configuration
        config_default = self.defaults_configuration_by_protocol
        if protocol in config_default:
            config = config | config_default[protocol]
        # Merge site configuration
        config_sites = self.defaults_configuration_by_site
        if (
            site in config_sites
            and "config_by_protocol" in config_sites[site]
            and protocol in config_sites[site]["config_by_protocol"]
        ):
            config = config | config_sites[site]["config_by_protocol"][protocol]
            # Merge domain configuration
            if (
                domain in config_sites[site]["domains"]
                and "config_by_protocol" in config_sites[site]["domains"][domain]
                and protocol
                in config_sites[site]["domains"][domain]["config_by_protocol"]
            ):
                config = (
                    config
                    | config_sites[site]["domains"][domain]["config_by_protocol"][
                        protocol
                    ]
                )
                # Merge group configuration
                if (
                    group in config_sites[site]["domains"][domain]["groups"]
                    and "config_by_protocol"
                    in config_sites[site]["domains"][domain]["groups"][group]
                    and protocol
                    in config_sites[site]["domains"][domain]["groups"][group][
                        "config_by_protocol"
                    ]
                ):
                    config = (
                        config
                        | config_sites[site]["domains"][domain]["groups"][group][
                            "config_by_protocol"
                        ][protocol]
                    )
        # Merge host configuration
        if protocol in host["config"]:
            config = config | host["config"][protocol]

        return config


# --------------------------------------------------------------


class BadValueException(BaseException):
    """
    Exception sent when user try to set bad value format.
    """

    def __init__(self, value):
        self.value = value

    def __str__(self):
        return repr(self.value)


# --------------------------------------------------------------
class UserGlobalConf:
    """
    Class used to manage user global configuration in local user configuration
    file.

    Data are store in config.user_prefs_filename in JSON format in global dict:
    {
     ...
         "global": {
             "name1": "value1",
             "name2": "value2",
             ...
         }
     ...
    }

    defaults dict contain all managed data names and associated default values.

    For each data, the class contains a getter and a setter. the setter check
    the format of new value using check_{att_name} function.

    If the check is ok, the value is set, else, a BadValueException is raised.
    """

    defaults = {
        "fullscreen": {
            "value": False,
        },
        "resolution": {
            "value": "1024x768",
            "type": "resolution",
        },
        "dynamic_resolution": {
            "value": True,
        },
    }

    def attributs():
        """
        Returns all names of managed data.
        """
        return UserGlobalConf.defaults.keys()

    def check_fullscreen(value):
        return isinstance(value, bool)

    def check_resolution(value):
        return isinstance(value, str) and re.match(r"^\d+x\d+$", value)

    def check_dynamic_resolution(value):
        return isinstance(value, bool)

    def __init__(self):
        """
        By default, new object is initialized with defaults values.
        """
        for a in UserGlobalConf.attributs():
            self.__dict__[f"_{a}"] = UserGlobalConf.defaults[a]["value"]

    def __str__(self):
        str = "UserGlobalConf: "
        for a in UserGlobalConf.attributs():
            attr = getattr(self, f"_{a}")
            str += f"_{a}={attr} "
        return str

    @property
    def resolution(self):
        return self._resolution

    @resolution.setter
    def resolution(self, res):
        if UserGlobalConf.check_resolution(res):
            self._resolution = res
        else:
            raise BadValueException(f"resolution bad value: {res}")

    @property
    def fullscreen(self):
        return self._fullscreen

    @fullscreen.setter
    def fullscreen(self, full):
        if UserGlobalConf.check_fullscreen(full):
            self._fullscreen = full
        else:
            raise BadValueException(f"fullscreen bad value: {full} not Boolean")

    @property
    def dynamic_resolution(self):
        return self._dynamic_resolution

    @dynamic_resolution.setter
    def dynamic_resolution(self, full):
        if UserGlobalConf.check_dynamic_resolution(full):
            self._dynamic_resolution = full
        else:
            raise BadValueException(f"dynamic_resolution bad value: {full} not Boolean")

    def store_fmt(self):
        """
        Format data for local storage.
        TODO: move to UserConf new class.
        """
        data = {"global": {}}
        for a in UserGlobalConf.attributs():
            attr = getattr(self, f"_{a}")
            data["global"][a] = attr
        return data

    def load(self, data):
        """
        Initialise class using data from user preference file.
        data is a dict.
        """
        if "global" in data:
            for a in UserGlobalConf.attributs():
                if a in data["global"]:
                    setattr(self, a, data["global"][a])


# -----------------------------------------------------------------
class UserPreferences:
    """
    Class used to nanage user preferences.
    From UserPref filename in json format, load
    - UserGlobalConf
    - UserHostsConf

    """

    def __init__(self, filename):
        self._ugc = UserGlobalConf()
        self.load(filename)

    @property
    def globals(self):
        return self._ugc

    def load(self, filename=None):
        if filename is not None:
            self._filename = filename

        try:
            tmp = json.loads(open(self._filename, "r").read())
            self._ugc.load(tmp)
            if "hosts" in tmp:
                self._hosts = tmp["hosts"]
            else:
                self._hosts = {}
        except:
            error("Unable to load user preferences file: %s" % self._filename)
            self._hosts = {}

    def save(self):
        data = {
            "global": {},
            "hosts": self._hosts,
        }
        for a in UserGlobalConf.attributs():
            data["global"][a] = getattr(self._ugc, a)

        open(self._filename, "w", encoding="utf8").write(
            json.dumps(data, indent=4, ensure_ascii=False)
        )

    def update_globals(self, ugc):
        self._ugc = ugc

    @property
    def hosts(self):
        return self._hosts


# -----------------------------------------------------------------
class MyConfig:
    """
    Class used to manage program configuration.
    """

    def __init__(self):
        # Default web server listening port
        self.listening_port = 8080

        # For debuging
        self.verbose = False

        # Document Root for static web pages.
        self.document_root = "/etc/mydashboard/html"

        # ssl context for unverified site.
        self.ssl_default_ctx = None

        # Script used for rdp connection
        self.remote_connection_script = "data/remote_connection.sh"

        # Default remote_list for demo
        self.remotes = Remotes(uri="data/remote.json")

        # Default user preférence file name for demo
        self.user_prefs_filename = "data/user-preferences.json"
        self._user_prefs = UserPreferences(self.user_prefs_filename)

        # Default menu for demo
        self.menu_conf = "data/menu.json"

        # debug flag
        self.debuging = False

        # default debug file
        self.debug_filename = "~/mydash.log"

        # COnfiguration file
        self.conf_file = None

        # Current token session
        self.token = Token()

        # Safe mode if token is used
        self.use_token = True

        # Web browser
        self.webbrowser = "/usr/bin/firefox"

        # Run gui when run the dashboard
        self.run_gui = True

        # Used to place JS development dependencies
        self.dev_mode = False

    @property
    def remotelist_conf(self):
        return self.remotes.uri

    @remotelist_conf.setter
    def remotelist_conf(self, uri=None):
        self.remotes.uri = uri

    def load_user_prefs(self):
        self._user_prefs.load(self.user_prefs_filename)

    def save_user_prefs(self):
        self._user_prefs.save()

    def get_remotes(self, name=None):
        """
        Get remotes host configuration and apply user prefs merge.
        TODO: generate a list to avoid running merge on each call.
              just re génerate the list when remotes or local prefs
              changes
        """
        self.remotes.load()
        self.load_user_prefs()
        filtered_hosts = list(
            map(self._host_merge_with_user_pref, self.remotes.search(host_name=name))
        )
        return {"hosts": filtered_hosts, "ordering": self.remotes.get_formatting_order}

    def _host_merge_with_user_pref(self, h):
        """
        Function used for mapping action.
        """
        uuid = h["uuid"]
        if uuid in self.user_hosts():
            current_host = self.user_hosts()[uuid]
            for key in ("alias",):
                if key in current_host:
                    h[key] = current_host[key]
                else:
                    warning(f"user-preferences: host {uuid} has not meta-data {key}")
        return h

    def get_menu(self):
        try:
            return json.loads(open(self.menu_conf, "r").read())
        except:
            error("Unable to load menu file: %s" % self.menu_conf)
            return {}

    def update_globals(self, ugc):
        self._user_prefs.update_globals(ugc)
        self._user_prefs.save()

    def user_globals(self):
        return self._user_prefs.globals

    def user_hosts(self):
        return self._user_prefs.hosts


# ----------------------------------------------------------------------
class ApiJSON:
    """
    Class used to manage data format for api exchange.
    IHM for example.

    Sent data is an array of couple name/value :
       {
           "preferences": [
               {
                   "name": "key1",
                   "value": "val1"
               },
               ....
           ]
       }

    In user configuration file, data are stored in a dict form:
       {
           "global": [
               {
                   "key1": "val1",
                   ....
               }
           ]
       }

    The translation's done here.
    """

    def __init__(self):
        self.version = "1"

    def typeof(v):
        if "type" in v:
            return v["type"]

        return type(v["value"]).__name__

    def user_global_conf_fmt(ugc):
        """
        Transform UserGlobalConf in json format sent to front.
        """
        return {
            "preferences": [
                {
                    "name": a,
                    "value": getattr(ugc, a),
                    "default": UserGlobalConf.defaults[a]["value"],
                    "type": ApiJSON.typeof(UserGlobalConf.defaults[a]),
                }
                for a in UserGlobalConf.attributs()
            ]
        }

    def user_global_conf(data):
        """
        Transform sent json data into UserGlobalConf object.
        """
        if not isinstance(data, dict):
            raise BadValueException("data is not a dict")

        ugc = UserGlobalConf()
        for p in data["preferences"]:
            a_name = p["name"]
            if a_name in UserGlobalConf.attributs():
                setattr(ugc, a_name, p["value"])

        return ugc


config = MyConfig()

# JS dependencies dict { prod: dev }
javascript_dependencies = {
    "/js/vue.global.prod.min.js": "/js/vue.global.min.js",
    "/js/vuex.global.prod.min.js": "/js/vuex.global.min.js",
    "/js/vue-router.global.prod.min.js": "/js/vue-router.global.min.js",
}


# -----------------------------------------------------------------
# HTTP: default page showing all notifiers status.
# -----------------------------------------------------------------


def page(start_response, output, ctype="text/plain", status="200 OK", headers=[]):
    """
    Send output data using ctype and status.
    This is the low level tool used by other functions.
    """
    response_headers = [("Content-type", ctype), ("Content-Length", str(len(output)))]
    for h in headers:
        response_headers.append(h)

    # Use global config, but param should be better
    if config.dev_mode:
        response_headers.append(("Access-Control-Allow-Origin", "*"))
        response_headers.append(
            ("Access-Control-Allow-Headers", "API-Key,accept, Content-Type")
        )

    start_response(status, response_headers)
    return [output]


def static_page(start_response, document_root, filename, fullpath=False, ctype=None):
    """
    Used to send data get from filename if presents in document_root path.
    """
    status = "200 OK"

    try:
        if fullpath:
            real_file_path = os.path.expanduser(filename)
        else:
            real_file_path = os.path.join(document_root, filename)
        output = open(real_file_path, "rb").read()
        if ctype is None:
            ctype = mimetypes.guess_type(real_file_path)[0]

        if config.dev_mode and filename in ("index.html"):
            output = replace_dependencies(output)
    except:
        status = "500 INTERNAL ERROR"
        import traceback

        warning("INTERNAL ERROR: %s " % sys.exc_info()[0])
        print("-" * 60)
        traceback.print_exc(file=sys.stdout)
        print("-" * 60)
        output = "The code seems to have an internal error :("
        ctype = "text/plain; charset=UTF-8"

    return page(start_response, output, ctype=ctype, status=status)


def get_http_code(code):
    if code == 200:
        return "200 OK"
    elif code == 400:
        return "400 BAD REQUEST"
    elif code == 500:
        return "500 INTERNAL ERROR"
    else:
        return "%d ERROR" % code


def jsonapi(start_response, data, code=200):
    """
    Send data in json format.
    """
    status = get_http_code(code)
    try:
        output = json.dumps(data)
        ctype = "application/json; charset=UTF-8"
    except:
        status = get_http_code(500)
        import traceback

        warning("INTERNAL ERROR: %s " % sys.exc_info()[0])
        print("-" * 60)
        traceback.print_exc(file=sys.stdout)
        print("-" * 60)
        output = "The code seems to have an internal error :("
        ctype = "text/plain; charset=UTF-8"

    return page(start_response, wsgi_to_bytes(output), ctype=ctype, status=status)


def replace_dependencies(file_content):
    """
    Intercepts and corrects javascript dependencies in index.html.
    """
    import re

    content = file_content.decode("utf-8")
    for prod, dev in javascript_dependencies.items():
        pattern = re.compile(
            '<script src="{}" integrity=".*" crossorigin="anonymous"></script>'.format(
                prod
            )
        )
        content = re.sub(pattern, '<script src="{}"></script>'.format(dev), content)

    return content.encode("utf-8")


def doc(start_response, config):
    """
    Send documentation.
    """
    service_user_dir = os.path.expanduser("~/.config/systemd/user")
    service_name = os.path.sep.join((service_user_dir, "mydashboard.service"))

    output = """

Liste des actions possibles
===========================

/ui : Lance firefox et se connect au microservice

/remote/list : Liste de machines accessibles via rdp  (json)

/systemd/service : Genere le script de service a mettre en userland

  Exemple d'utilisation

      mkdir -p %s
      curl -b "MYTOKEN=$(cat %s)" --silent http://localhost:%s/systemd/service -o %s
      systemctl --user enable mydashboard
      systemctl --user start mydashboard

""" % (
        service_user_dir,
        config.token.filename,
        config.listening_port,
        service_name,
    )
    return page(
        start_response, wsgi_to_bytes(output), ctype="text/plain", status="200 OK"
    )


def service_status(start_response, config, environ):
    output = """
Environment
===========

%s
""" % (
        "\n".join("%s: %s" % (key, value) for key, value in sorted(environ.items()))
    )
    print(output)
    return page(
        start_response, wsgi_to_bytes(output), ctype="text/plain", status="200 OK"
    )


def systemd_service_display(start_response, document_root, conf_file):
    """
    Send systemd information to configure user systemd service.
    """
    if conf_file is None:
        dash_option = "-D %s" % document_root
    else:
        dash_option = "--conf %s" % conf_file

    prg_name = os.path.abspath(os.path.expanduser(sys.argv[0]))

    if "DISPLAY" in os.environ:
        display = os.environ["DISPLAY"]
    else:
        display = ":0"

    if "LANG" in os.environ:
        lang = os.environ["LANG"]
    else:
        lang = "fr_FR.UTF-8"

    status = "200 OK"
    output = """[Unit]
Description=My dashboard MicroService

[Service]
Environment="DISPLAY=%s" "LANG=%s"
ExecStart=%s -d -v --nogui  %s

[Install]
WantedBy=default.target
           """ % (
        display,
        lang,
        prg_name,
        dash_option,
    )

    return page(
        start_response, wsgi_to_bytes(output), ctype="text/plain", status="200 OK"
    )


def login_ok(start_response, token):
    """
    Send redirect with token as cookie.
    """
    status = "301 Moved Permanently"
    output = ""
    response_headers = [
        ("Content-type", "text/plain"),
        ("Content-Length", str(len(output))),
        ("Location", "/"),
        ("Set-Cookie", "MYTOKEN=%s; HttpOnly; SameSite=Strict" % token),
    ]
    start_response(status, response_headers)
    return wsgi_to_bytes(output)


def notfound(start_response, url):
    """
    Send not found page.
    """
    status = "404 NOT FOUND"
    output = "%s not found\n" % url
    return page(
        start_response, wsgi_to_bytes(output), ctype="text/plain", status=status
    )


def run_cmd(cmd_set, cmd_timeout=3, env=None):
    """
    Run local command in fork process.
    Returns subprocess status and stdout/stderr.
    Those informations are sent back to ui.
    """
    exit_code = 0
    status = 0
    pid = -1
    msg = ""

    p = None

    try:
        p = subprocess.Popen(
            cmd_set,
            shell=True,
            stdin=None,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            close_fds=True,
            env=env,
        )
        try:
            status = p.wait(cmd_timeout)

        except subprocess.TimeoutExpired:
            # process still running, it's ok
            True
        pid = p.pid

    except subprocess.CalledProcessError:
        msg = "Do not know howto do this action"
        status = 503

    if p is not None:
        if status > 0:
            child_out = str("".join(l.decode() for l in p.stdout.readlines()))
            child_stderr = str("".join(l.decode() for l in p.stderr.readlines()))
            msg = "{0}\n{1}\n".format(child_out, child_stderr)

    return [status, pid, msg]


# Write a function to merge two dictionaries deep
def merge_two_dicts(source, destination):
    """Given two dicts, merge them into a new dict as a shallow copy."""
    for key, value in source.items():
        if isinstance(value, dict):
            # get node or create one
            node = destination.setdefault(key, {})
            merge_two_dicts(value, node)
        else:
            destination[key] = value

    return destination


def launch_gui(config):
    """Launch the gui"""
    if config.use_token:
        status = run_cmd(
            [
                "%s http://localhost:%s/%s"
                % (config.webbrowser, config.listening_port, config.token.get())
            ]
        )
    else:
        status = run_cmd(
            ["%s http://localhost:%s" % (config.webbrowser, config.listening_port)]
        )
    return status


def user_preferences_global(start_response, environ, config):
    """Returns user preferences"""
    errors = []
    if environ["REQUEST_METHOD"] == "POST":
        try:
            request_body_size = int(environ.get("CONTENT_LENGTH", 0))
        except ValueError:
            request_body_size = 0
        try:
            # Get data sent by front
            ugc = ApiJSON.user_global_conf(
                json.loads(environ["wsgi.input"].read(request_body_size))
            )
            try:
                config.update_globals(ugc)
            except:
                errors.append({"user preferences": "Can't write to file "})
                import traceback

                warning("INTERNAL ERROR: %s " % sys.exc_info()[0])
                print("-" * 60)
                traceback.print_exc(file=sys.stdout)
                print("-" * 60)
        except:
            errors.append({"user preferences": "POST data are not valid"})

    data = ApiJSON.user_global_conf_fmt(config.user_globals())
    data["errors"] = errors

    if errors:
        status = 400
    else:
        status = 200
    return jsonapi(start_response, data, status)


def menu_list(start_response, config):
    """Sends menu list to ui
    Format:
    {
        "menu": [
            {
                "label": "[Code]",
                "url": "https://gitlab.com/fccagou/mydashboard"
            }
        ]
    }
    """

    menus = config.get_menu()
    data = {"menu": []}
    for k, v in menus.items():
        data["menu"].append({"label": k, "url": v})

    return jsonapi(start_response, data)


def remote_list(start_response, environ, config):
    """Sends remote hosts list

    TODO:
    -  Read remote list from json
    -  apply filter red from api (environ)
    """

    try:
        data = config.get_remotes()
    except:
        return jsonapi(
            start_response,
            {"code": 1, "message": "Can't read remotes configuration"},
            500,
        )

    # filter from api or externals data.

    return jsonapi(start_response, data)


def remote_connection(start_response, environ, config):
    host_uuid = environ["PATH_INFO"][16:]
    host = config.remotes.find_by_uuid(host_uuid)
    if host is None:
        return jsonapi(
            start_response, {"errors": {"code": 404, "message": "Host not found"}}, 404
        )

    remote_host = host["name"]
    site = host["config"]["site"]
    domain = host["config"]["domain"]
    group = host["config"]["group"]
    proto = host["config"]["proto"]

    # Create environment variables for connection script
    env = {
        'REMOTE_HOST': remote_host,
        'SITE': site,
        'DOMAIN': domain,
        'GROUP': group,
        'PROTOCOL': proto,
    }

    # Add optional options
    if "alias" in host:
        env['ALIAS'] = host["alias"]

    # Get merged protocol configuration for this host
    connection_configuration = config.remotes.get_configuration_protcol(host_uuid)
    for k, v in connection_configuration.items():
        env[f'PROTOCOL_{proto.upper()}_{k.upper()}'] = v

    exec_status = {}
    exec_status["cmd"] = config.remote_connection_script
    exec_status["env"] = env

    status = run_cmd([exec_status["cmd"]], env=env)

    exec_status["status"] = status[0]
    exec_status["pid"] = status[1]
    exec_status["msg"] = status[2]
    return jsonapi(start_response, exec_status)


def remote_information(start_response, environ, config):
    host_uuid = environ["PATH_INFO"][13:]
    host = config.remotes.find_by_uuid(host_uuid)
    if host is None:
        return jsonapi(
            start_response, {"errors": {"code": 404, "message": "Host not found"}}, 404
        )

    # Get merged configuration for this host
    connection_configuration = config.remotes.get_configuration_protcol(host_uuid)

    # Delete config entry
    if host["config"]["proto"] in host:
        del host["config"][host["config"]["proto"]]

    host["config"]["proto-config"] = connection_configuration

    return jsonapi(start_response, host)


# -----------------------------------------------------------------
# HTTP: WEB APP
# -----------------------------------------------------------------
def application(environ, start_response):
    global config

    if config.use_token:
        # First of all, try to find the token.
        # In the path ...
        if environ["PATH_INFO"][1:] == config.token.get():
            return login_ok(start_response, config.token.get())
        # ... or in cookies.
        try:
            cookies = environ["HTTP_COOKIE"]
            log(cookies)
            if not config.token.get() in cookies:
                raise Exception("")
        except:
            # no token find ... I'm a teapot
            return page(
                start_response,
                output=wsgi_to_bytes("I'm a teapot"),
                status="418 I'm a teapot",
            )

    if environ["REQUEST_METHOD"] == "OPTIONS":
        return page(
            start_response,
            wsgi_to_bytes(""),
            headers=[("Access-Control-Allow-Methods", "GET, POST")],
        )

    # Static files
    static_files = [
        "/css/bootstrap.min.css",
        "/css/bootstrap-icons.css",
        "/css/fonts/bootstrap-icons.woff",
        "/css/fonts/bootstrap-icons.woff2",
        "/js/bootstrap.bundle.js",
        "/img/computer.svg",
        "/img/favicon.ico",
        "/css/mydashboard.css",
        "/css/mydashboard-custom.css",
        "/js/axios.min.js",
        "/js/vue.global.prod.min.js",
        "/js/vuex.global.prod.min.js",
        "/js/vue-router.global.prod.min.js",
        "/js/app.js",
        "/js/routes.js",
        "/js/store.js",
        "/js/views/RemoteAccess.vue.js",
        "/js/views/UserPreferences.vue.js",
        "/js/views/NotFound.vue.js",
        "/js/components/NavBar.vue.js",
        "/js/components/Toasts.vue.js",
        "/js/components/Toast.vue.js",
        "/js/components/PreferenceInput.vue.js",
        "/js/components/RemoteAccess/Site.vue.js",
        "/js/components/RemoteAccess/Domain.vue.js",
        "/js/components/RemoteAccess/Host.vue.js",
        "/js/components/RemoteAccess/HostInformationModal.vue.js",
        "/js/components/RemoteAccess/HostCustomModal.vue.js",
        "/js/components/RemoteAccess/HostMenu.vue.js",
    ]

    # Load JS dependencies
    if config.dev_mode:
        static_files += javascript_dependencies.values()
    else:
        static_files += javascript_dependencies.keys()

    if environ["PATH_INFO"] in static_files:
        return static_page(
            start_response, config.document_root, environ["PATH_INFO"][1:]
        )

    # Documentation
    if environ["PATH_INFO"] == "/doc":
        return doc(start_response, config)

    if environ["PATH_INFO"] == "/status":
        return service_status(start_response, config, environ)

    # User interface
    if environ["PATH_INFO"] == "/ui":
        launch_gui(config)

    elif environ["PATH_INFO"] == "/systemd/service":
        return systemd_service_display(
            start_response, config.document_root, config.conf_file
        )

    elif environ["PATH_INFO"] == "/conf/menu":
        return menu_list(start_response, config)

    elif environ["PATH_INFO"] == "/remote/list":
        return remote_list(start_response, environ, config)

    elif environ["PATH_INFO"][0:16] == "/remote/connect/":
        return remote_connection(start_response, environ, config)

    elif environ["PATH_INFO"][0:13] == "/remote/info/":
        return remote_information(start_response, environ, config)

    elif environ["PATH_INFO"] == "/user/preferences/global":
        return user_preferences_global(start_response, environ, config)

    else:
        # TODO: passer un message d'erreur
        True

    return static_page(start_response, config.document_root, "index.html")


# -----------------------------------------------------------------
# MAIN PROGRAM.
# -----------------------------------------------------------------
def EndException(BaseException):
    def __init__(self, value):
        self.value = value

    def __str__(self):
        return repr(self.value)


def end_process(signum, frame):
    raise EndException("Signal catch")


def main(args, config):
    """Main function checking configuration and run http server."""
    config.verbose = args.verbose
    config.debuging = args.debug

    # Catch signal to quit cleanly.
    signal.signal(signal.SIGTERM, end_process)
    signal.signal(signal.SIGQUIT, end_process)

    if config.debuging:
        log("args list: %s " % args)

    # Get configuration from file.
    if args.conf is not None:
        config.conf_file = os.path.expanduser(args.conf)
        log("Using config file %s" % config.conf_file)
        conf = json.loads(open(config.conf_file, "r").read())

        if "documentroot" in conf:
            config.document_root = conf["documentroot"]

        if "ssl_allow_unverified" in conf and conf["ssl_allow_unverified"] == "True":
            config.ssl_default_ctx = ssl._create_unverified_context()

        if "remote_connection" in conf:
            config.remote_connection_script = conf["remote_connection"]

        if "remotelist" in conf:
            config.remotelist_conf = conf["remotelist"]

        if "menuconf" in conf:
            config.menu_conf = conf["menuconf"]

        if "config.debug_filename" in conf:
            config.debug_filename = conf["config.debug_filename"]

        if "token_filename" in conf:
            config.token.filename = os.path.expanduser(conf["token_filename"])

        if "gui" in conf:
            if conf["gui"] == "True":
                config.run_gui = True
            else:
                config.run_gui = False

        if "webbrowser" in conf:
            config.webbrowser = conf["webbrowser"]

        if "user_prefs_filename" in conf:
            config.user_prefs_filename = conf["user_prefs_filename"]

    # Get parameters from command line.
    if args.documentroot:
        config.document_root = args.documentroot
    config.document_root = os.path.abspath(os.path.expanduser(config.document_root))

    if args.remotecnx:
        config.remote_connection_script = args.remotecnx
    config.remote_connection_script = os.path.abspath(
        os.path.expanduser(config.remote_connection_script)
    )

    if args.debugfilename:
        config.debug_filename = args.debugfilename
    config.debug_filename = os.path.abspath(os.path.expanduser(config.debug_filename))
    logging.basicConfig(filename=config.debug_filename, level=logging.DEBUG)

    if args.remotelist:
        config.remotelist_conf = args.remotelist
    config.remotelist_conf = os.path.abspath(os.path.expanduser(config.remotelist_conf))

    if args.menuconf:
        config.menu_conf = args.menuconf
    config.menu_conf = os.path.abspath(os.path.expanduser(config.menu_conf))

    if args.webbrowser:
        config.webbrowser = args.webbrowser
    config.webbrowser = os.path.abspath(os.path.expanduser(config.webbrowser))

    if args.userprefs:
        config.user_prefs_filename = args.userprefs
    config.user_prefs_filename = os.path.abspath(
        os.path.expanduser(config.user_prefs_filename)
    )

    if args.nogui:
        config.run_gui = False

    if args.devmode:
        config.dev_mode = True

    config.use_token = not args.notoken

    # TODO: valider l'existence des scripts

    if config.debuging:
        if config.run_gui:
            log("Launch gui")
        log("debug file               : %s" % config.debug_filename)
        log("menu_conf                : %s" % config.menu_conf)
        log("web browser              : %s" % config.webbrowser)
        log("document_root            : %s" % config.document_root)
        log("remotelist_conf          : %s" % config.remotelist_conf)
        log("user_prefs_filename      : %s" % config.user_prefs_filename)
        log("remote_connection_script : %s" % config.remote_connection_script)

    if not config.use_token:
        warning("UNSAFE MODE")

    try:
        config.listening_port = args.port
        try:
            # Run http service.
            httpd = server.make_server("", config.listening_port, application)
            log("Serving HTTP on port %i..." % config.listening_port)
            http_serve = True

            if config.use_token:
                config.token.new()
                if not config.token.save():
                    end_process

        except OSError as oe:
            if oe.errno != errno.EADDRINUSE:
                end_process
            # The service is already running so get parameters
            # to delegate action.
            http_serve = False
            log("Server already listening on port %i..." % config.listening_port)
            log("Use TOKEN = %s" % config.use_token)
            if config.use_token and not config.token.sync():
                os._exit(os.EX_OSFILE)

        if config.debuging and config.use_token:
            log("token_filename           : %s" % config.token.filename)
            log("token                    : %s" % config.token.get())

        # Open GUI.
        if config.run_gui:
            launch_gui(config)

        # Process only if not already in use..
        if http_serve:
            httpd.serve_forever()

    except KeyboardInterrupt:
        log("End asked by user...bye bye !")
    except EndException as ee:
        log(ee.value)
    except:
        print("Unexpected error:", sys.exc_info()[0])
    finally:
        log("Waiting end of process")
        time.sleep(2)


if __name__ == "__main__":
    # Process passed arguments.
    try:
        import argparse

        parser = argparse.ArgumentParser(
            description="Notify processor.",
        )
        USING_ARGPARSE = True
    except ImportError:
        import optparse

        parser = optparse.OptionParser(description="PYthon Alert Processor.")
        parser.parse_args_orig = parser.parse_args
        parser.parse_args = lambda: parser.parse_args_orig()[0]
        parser.add_argument = parser.add_option
        USING_ARGPARSE = False

    parser.add_argument("--conf", "-c", help="Configuration file.")
    parser.add_argument(
        "--port",
        "-p",
        default=config.listening_port,
        type=int,
        help="Listening port for status push .",
    )
    parser.add_argument("--verbose", "-v", action="store_true", help="verbose.")
    parser.add_argument("--debug", "-d", action="store_true", help="Debug mode.")
    parser.add_argument("--debugfilename", default=None, help="Debug file name mode.")
    parser.add_argument("--daemon", action="store_true", help="Enable daemon mode.")
    parser.add_argument(
        "--pid", action="store_true", help="Write pid file (see --pidfile)"
    )
    parser.add_argument(
        "--pidfile", default="/var/run/pyap.pid", help="Set the pid file."
    )
    parser.add_argument(
        "--documentroot", "-D", default=None, help="Document root for static web pages."
    )
    parser.add_argument(
        "--remotelist", "-R", default=None, help="Url to json remote list"
    )
    parser.add_argument(
        "--menuconf", "-M", default=None, help="Url to json menu configuration"
    )
    parser.add_argument(
        "--remotecnx", "-C", default=None, help="Remote connection script"
    )
    parser.add_argument(
        "--notoken", action="store_true", help="Unsafe mode without token."
    )
    parser.add_argument(
        "--nogui", action="store_true", help="Launch grahical user interface"
    )
    parser.add_argument(
        "--webbrowser",
        default=None,
        help="Select web browser (default: %s)" % config.webbrowser,
    )
    parser.add_argument(
        "--devmode",
        action="store_true",
        help="Use JS developpement dependencies (can only be used with the git repository)",
    )
    parser.add_argument("--userprefs", help="File used to store user preferences")

    args = parser.parse_args()

    if args.daemon:
        # do the UNIX double-fork magic, see Stevens' "Advanced
        # Programming in the UNIX Environment" for details (ISBN 0201563177)
        if args.debug or args.verbose:
            log("Running daemon mode.")

        if os.fork() > 0:
            sys.exit(0)

        # Decouple from parent environment
        os.chdir("/")
        os.setsid()
        # TODO os.umask()
        # Redirect the standard I/O file descriptors to /dev/null
        if hasattr(os, "devnull"):
            REDIRECT_TO = os.devnull
        else:
            REDIRECT_TO = "/dev/null"

        fd = os.open(REDIRECT_TO, os.O_RDWR)
        os.dup2(fd, 0)  # standard input (0)
        os.dup2(fd, 1)  # standard output (1)
        os.dup2(fd, 2)  # standard error (2)

        # Double-fork magic must be single-fork for systemd
        # TODO: test under centos6 using init.
        # if os.fork() > 0:
        #     sys.exit(0)

    # Write pid file
    if args.pid:
        with open(args.pidfile, "w") as f:
            f.write(str(os.getpid()))

    # Run main process.
    main(args, config)

    # Remove pid file at the end of process.
    if args.pid:
        os.remove(args.pidfile)

    os._exit(os.EX_OK)
