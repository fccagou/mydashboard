#!/usr/bin/env python3
# -*- encoding: utf-8 -*-
"""
Local Dashboard for easy configuration.

The aim is to give access for some tools from webbrowser

- Read commande list from config files

  - system config
  - user config

- Access from web page
- application runs with user right
- Allow use to add own application
- Can run graphical applications



"""

from __future__ import print_function

import os
import ssl
import sys
import json
import stat
import time
import errno
import signal
import logging
import mimetypes
import subprocess
import wsgiref.simple_server as server



# -----------------------------------------------------------------
#  python wrapper
# -----------------------------------------------------------------
try:
    # For Python 3.0 and later
    from urllib.request import urlopen
    MYURLOPEN = lambda url, timeout, context: urlopen(url=url, timeout=timeout, context=context)
    from urllib.parse import parse_qs
except ImportError:
    # Fall back to Python 2's urllib2
    from urllib2 import urlopen
    MYURLOPEN = lambda url, timeout, context: urlopen(url=url, timeout=timeout)
    from urllib2.parse import parse_qs

def wsgi_to_bytes(str2convert):
    """
    Because of https://www.python.org/dev/peps/pep-3333/#unicode-issues
    """
    return str2convert.encode('iso-8859-1')




# -----------------------------------------------------------------
# Manage Token
# -----------------------------------------------------------------


try:
    from secrets import token_hex
except:
    # Code from lib/secrets.py
    # https://github.com/python/cpython/blob/3.6/Lib/secrets.py
    #
    import binascii

    DEFAULT_ENTROPY = 32  # number of bytes to return by default

    def token_bytes(nbytes=None):
        """Return a random byte string containing *nbytes* bytes.
        If *nbytes* is ``None`` or not supplied, a reasonable
        default is used.
        >>> token_bytes(16)  #doctest:+SKIP
        b'\\xebr\\x17D*t\\xae\\xd4\\xe3S\\xb6\\xe2\\xebP1\\x8b'
        """
        if nbytes is None:
            nbytes = DEFAULT_ENTROPY
        return os.urandom(nbytes)

    def token_hex(nbytes=None):
        """Return a random text string, in hexadecimal.
        The string has *nbytes* random bytes, each byte converted to two
        hex digits.  If *nbytes* is ``None`` or not supplied, a reasonable
        default is used.
        >>> token_hex(16)  #doctest:+SKIP
        'f9bf78b9a18ce6d46a0cd2b0b86df9da'
        """
        return binascii.hexlify(token_bytes(nbytes)).decode('ascii')



class Token:
    """Classe used to manage token file"""
    def __init__(self, value=False, filename='~/.mydashboard', size=16 ):
        self.size = size
        if value:
            self.value = value
        else:
            self.value = ''
            self.new ()

        self.filename = os.path.abspath(os.path.expanduser(filename))

    def get(self):
        return self.value

    def new(self):
        self.value = token_hex(self.size)
        return self.value

    def save(self):
        try:
            with open(self.filename, 'w') as f:
                f.write(str(self.value))
        except:
            error("unable to write token in file %s" % self.filename)
            return False

        try:
            os.chmod(self.filename, stat.S_IRUSR|stat.S_IWUSR)
        except:
            error("Unable to set rights 600 on file %s" % self.filename)
            return False

        return True

    def sync(self):
        try:
            with open(self.filename, 'r') as f:
                self.value = f.readlines()[0]
            return True
        except:
            warning("unable to read token from file %s" % self.filename)
            # TODO: make exception
            return False





# -----------------------------------------------------------------
# GLOBAL CONFIG
# -----------------------------------------------------------------

class MyConfig:
    def __init__(self):

        # Default web server listening port
        self.listening_port = 8080

        # For debuging
        self.verbose = False

        # Document Root for static web pages.
        self.document_root = '/etc/mydashboard/html'

        # ssl context for unverified site.
        self.ssl_default_ctx = None

        # Script used for rdp connection
        self.remote_connection_script = 'data/remote_connection.sh'

        # Default remote_list for demo
        self.remotelist_conf = 'data/remote.json'

        # Default menu for demo
        self.menu_conf = 'data/menu.json'

        # debug flag
        self.debuging = False

        # default debug file
        self.debug_filename = '~/mydash.log'

        # COnfiguration file
        self.conf_file=None

        # Current token session
        self.token=Token()

        # Safe mode if token is used
        use_token=True

        # Web browser
        self.webbrowser='/usr/bin/firefox'

        # Run gui when run the dashboard
        self.run_gui=True



config = MyConfig()

# -----------------------------------------------------------------
# Informational functions.
# -----------------------------------------------------------------

def log(msg):
    global config
    if config.verbose:
        print("[+] - ", msg)
    else:
        pass

def info(msg):
    global config
    if config.verbose:
        print("[i] - ", msg)
    else:
        pass

def warning(msg):
    global config
    if config.verbose:
        print("[!] - ", msg)
    else:
        pass

def error(msg):
    global config
    if config.verbose:
        print("[-] - ", msg)
    else:
        pass

def debug(msg):
    global config
    if config.debuging:
        logging.debug(msg)



# -----------------------------------------------------------------
# HTTP: default page showing all notifiers status.
# -----------------------------------------------------------------

def page(start_response, output, ctype='text/plain', status="200 OK" ):
    """
    Send output data using ctype and status.
    This is the low level tool used by other functions.
    """
    response_headers = [('Content-type', ctype),
                        ('Content-Length', str(len(output)))]
    start_response(status, response_headers)
    return [output]



def static_page(start_response, document_root, filename, fullpath=False):
    """
    Used to send data get from filename if presents in document_root path.
    """
    status = "200 OK"

    try:
        if fullpath:
            real_file_path = os.path.expanduser(filename)
        else:
            real_file_path = os.path.join(document_root,filename)
        output = open(real_file_path, 'rb').read()
        ctype = mimetypes.guess_type(real_file_path)[0]
    except:
        status = "500 INTERNAL ERROR"
        import traceback
        warning("INTERNAL ERROR: %s " %  sys.exc_info()[0])
        print('-'*60)
        traceback.print_exc(file=sys.stdout)
        print('-'*60)
        output = "The code seems to have an internal error :("
        ctype = 'text/plain; charset=UTF-8'

    return page(start_response, output, ctype=ctype, status=status)



def jsonapi(start_response, data):
    """
    Send data in json format.
    """
    status = "200 OK"

    try:
        import json
        output = json.dumps(data)
        ctype='application/json; charset=UTF-8'
    except:
        status = "500 INTERNAL ERROR"
        import traceback
        warning("INTERNAL ERROR: %s " %  sys.exc_info()[0])
        print('-'*60)
        traceback.print_exc(file=sys.stdout)
        print('-'*60)
        output = "The code seems to have an internal error :("
        ctype = 'text/plain; charset=UTF-8'

    return page(start_response, wsgi_to_bytes(output), ctype=ctype, status=status)


def doc(start_response, config):
    """
    Send documentation.
    """
    service_user_dir = os.path.expanduser('~/.config/systemd/user')
    service_name = os.path.sep.join((service_user_dir, 'mydashboard.service'))

    output = """

Liste des actions possibles
===========================

/ui : Lance firefox et se connect au microservice

/remote/list : Liste de machines accessibles via rdp  (json)

/systemd/service : Genere le script de service a mettre en userland

  Exemple d'utilisation

      mkdir -p %s
      curl -b "MYTOKEN=$(cat %s)" --silent http://localhost:%s/systemd/service -o %s
      systemctl --user enable mydashboard
      systemctl --user start mydashboard

""" % (service_user_dir, config.token.filename, config.listening_port, service_name )
    return page(start_response, wsgi_to_bytes(output), ctype='text/plain', status='200 OK')


def service_status(start_response, config, environ):

    output = """
Environment
===========

%s
""" % (
        "\n".join('%s: %s' % (key, value) for key, value in sorted(environ.items()))
        )
    print(output)
    return page(start_response, wsgi_to_bytes(output), ctype='text/plain', status='200 OK')


def systemd_service_display(start_response, document_root, conf_file):
    """
    Send systemd information to configure user systemd service.
    """
    if conf_file is None:
        dash_option = "-D %s" % document_root
    else:
        dash_option = "--conf %s" % conf_file

    prg_name = os.path.abspath(os.path.expanduser(sys.argv[0]))

    if 'DISPLAY' in os.environ:
        display = os.environ['DISPLAY']
    else:
        display = ':0'

    if 'LANG' in os.environ:
        lang = os.environ['LANG']
    else:
        lang = 'fr_FR.UTF-8'

    status = '200 OK'
    output = """[Unit]
Description=My dashboard MicroService

[Service]
Environment="DISPLAY=%s" "LANG=%s"
ExecStart=%s -d -v --nogui  %s

[Install]
WantedBy=default.target
           """ % (display, lang, prg_name, dash_option)

    return page(start_response, wsgi_to_bytes(output), ctype='text/plain', status='200 OK')



def login_ok(start_response, token):
    """
    Send redirect with token as cookie.
    """
    status = '301 Moved Permanently'
    output = ''
    response_headers = [('Content-type', 'text/plain'),
                        ('Content-Length', str(len(output))),
                        ('Location', '/'),
                        ('Set-Cookie', "MYTOKEN=%s" % token),
                        ]
    start_response(status, response_headers)
    return wsgi_to_bytes(output)


def notfound(start_response, url):
    """
    Send not found page.
    """
    status = '404 NOT FOUND'
    output = "%s not found\n" % url
    return page(start_response, wsgi_to_bytes(output), ctype='text/plain', status=status)



def run_cmd(cmd_set, cmd_timeout=3):
    """
    Run local command in fork process.
    Returns subprocess status and stdout/stderr.
    Those informations are sent back to ui.
    """
    exit_code = 0
    status = 0
    pid = -1
    msg = ''

    p = None

    try:
        p=subprocess.Popen(cmd_set, shell=True, stdin=None, stdout=subprocess.PIPE, stderr=subprocess.PIPE, close_fds=True)
        try:
            status = p.wait(cmd_timeout)

        except subprocess.TimeoutExpired:
            # process still running, it's ok
            True
        pid = p.pid

    except subprocess.CalledProcessError:
        msg='Do not know howto do this action'
        status = 503

    if p is not None:
       if status > 0:
           child_out = str("".join( l.decode() for l in p.stdout.readlines()))
           child_stderr = str("".join(l.decode() for l in p.stderr.readlines()))
           msg="{0}\n{1}\n".format(child_out, child_stderr)

    return [status, pid , msg]


def launch_gui(config):
    """Launch the gui"""
    if config.use_token:
        status = run_cmd(["%s http://localhost:%s/%s" % (config.webbrowser, config.listening_port,config.token.get())])
    else:
        status = run_cmd(["%s http://localhost:%s" % (config.webbrowser, config.listening_port)])
    return status


def remote_connection(start_response, environ):

    (site,domain,group,remote_host) = environ['PATH_INFO'][8:].split('/')
    opts = parse_qs(environ['QUERY_STRING'])
    if 'proto' in opts:
        proto = opts['proto'][0]
        if 'sec' in opts:
            sec = opts['sec'][0]
        else:
            sec = 'nla'
    else:
        proto = ''
        sec = ''

    exec_status = {}
    exec_status['cmd'] = "%s '%s' '%s' '%s' '%s' '%s' '%s'" % (config.remote_connection_script, site, domain, group, remote_host, proto, sec)
    status = run_cmd(["%s '%s' '%s' '%s' '%s' '%s' '%s' "
        % (config.remote_connection_script, site, domain, group, remote_host, proto, sec) ])
    exec_status['status'] = status[0]
    exec_status['pid'] = status[1]
    exec_status['msg'] = status[2]
    return jsonapi(start_response,exec_status)

# -----------------------------------------------------------------
# HTTP: WEB APP
# -----------------------------------------------------------------
def application(environ, start_response):

    global config

    if config.use_token:
        # First of all, try to find the token.
        # In the path ...
        if environ['PATH_INFO'][1:] == config.token.get():
            return login_ok(start_response, config.token.get())
        # ... or in cookies.
        try:
            cookies=environ['HTTP_COOKIE']
            log(cookies)
            if not config.token.get() in cookies:
                raise Exception('')
        except:
            # no token find ... I'm a teapot
            return page(start_response, output=wsgi_to_bytes("I'm a teapot"),
                    status="418 I'm a teapot")

    # Static files
    if environ['PATH_INFO'] in ['/bootstrap.min.css', '/jquery.min.js', '/bootstrap.bundle.js', '/computer.png', '/mydashboard.js', '/mydashboard.css' ]:
        return static_page(start_response, config.document_root, environ['PATH_INFO'][1:])

    # Documentation
    if environ['PATH_INFO'] == "/doc":
        return doc(start_response, config)

    if environ['PATH_INFO'] == '/status':
        return service_status(start_response, config, environ)

    # User interface
    if environ['PATH_INFO'] == "/ui":
        launch_gui (config)

    elif environ['PATH_INFO'] == "/systemd/service":
        return systemd_service_display(start_response, config.document_root, config.conf_file)

    elif environ['PATH_INFO'] == "/conf/menu":
        return static_page(start_response,config.document_root,  config.menu_conf ,fullpath=True )

    elif environ['PATH_INFO'] == "/remote/list":
        return static_page(start_response,config.document_root,  config.remotelist_conf ,fullpath=True )

    elif environ['PATH_INFO'][0:8] == "/remote/":
        return remote_connection(start_response, environ)

    else:
        # TODO: passer un message d'erreur
        True


    return static_page(start_response, config.document_root,'template.html')


# -----------------------------------------------------------------
# MAIN PROGRAM.
# -----------------------------------------------------------------
def EndException(BaseException):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return repr(self.value)

def end_process(signum, frame):
    raise EndException('Signal catch')



def main(args, config):
    """ Main function checking configuration and run http server.
    """
    config.verbose = args.verbose
    config.debuging = args.debug

    # Catch signal to quit cleanly.
    signal.signal(signal.SIGTERM, end_process)
    signal.signal(signal.SIGQUIT, end_process)

    if config.debuging:
        log("args list: %s " %  args)

    # Get configuration from file.
    if args.conf is not None:
        config.conf_file = os.path.expanduser(args.conf)
        log('Using config file %s' % config.conf_file)
        conf = json.loads(open(config.conf_file, 'r').read())

        if 'documentroot' in conf:
            config.document_root = conf['documentroot']

        if 'ssl_allow_unverified' in conf and conf['ssl_allow_unverified'] == "True":
            config.ssl_default_ctx = ssl._create_unverified_context()

        if 'remote_connection' in conf:
           config.remote_connection_script = conf['remote_connection']

        if 'remotelist' in conf:
           config.remotelist_conf = conf['remotelist']

        if 'menuconf' in conf:
           config.menu_conf = conf['menuconf']

        if 'config.debug_filename' in conf:
           config.debug_filename = conf['config.debug_filename']

        if 'token_filename' in conf:
            config.token.filename = os.path.expanduser(conf['token_filename'])

        if 'gui' in conf:
            if conf['gui'] == "True":
                config.run_gui = True
            else:
                config.run_gui = False

        if 'webbrowser' in conf:
            config.webbrowser = conf['webbrowser']

    # Get parameters from command line.
    if args.documentroot:
        config.document_root = args.documentroot
    config.document_root = os.path.abspath(os.path.expanduser(config.document_root))

    if args.remotecnx:
        config.remote_connection_script = args.remotecnx
    config.remote_connection_script = os.path.abspath(os.path.expanduser(config.remote_connection_script))

    if args.debugfilename:
        config.debug_filename = args.debugfilename
    config.debug_filename = os.path.abspath(os.path.expanduser(config.debug_filename))
    logging.basicConfig(filename=config.debug_filename,level=logging.DEBUG)


    if args.remotelist:
        config.remotelist_conf = args.remotelist
    config.remotelist_conf = os.path.abspath(os.path.expanduser(config.remotelist_conf))

    if args.menuconf:
        config.menu_conf = args.menuconf
    config.menu_conf = os.path.abspath(os.path.expanduser(config.menu_conf))

    if args.webbrowser:
        config.webbrowser = args.webbrowser
    config.webbrowser = os.path.abspath(os.path.expanduser(config.webbrowser))

    if args.nogui:
        config.run_gui = False

    config.use_token = not args.notoken

    # TODO: valider l'existence des scripts

    if config.debuging:
        if config.run_gui:
            log('Launch gui')
        log("debug file               : %s" % config.debug_filename)
        log("menu_conf                : %s" % config.menu_conf)
        log("web browser              : %s" % config.webbrowser)
        log("document_root            : %s" % config.document_root)
        log("remotelist_conf          : %s" % config.remotelist_conf)
        log("remote_connection_script : %s" % config.remote_connection_script)

    if not config.use_token:
        warning('UNSAFE MODE')

    try:
        config.listening_port = args.port
        try:
            # Run http service.
            httpd = server.make_server('', config.listening_port, application)
            log("Serving HTTP on port %i..." % config.listening_port)
            http_serve = True

            if config.use_token:
                config.token.new()
                if not config.token.save():
                    end_process

        except OSError as oe:
            if oe.errno != errno.EADDRINUSE:
                end_process
            # The service is already running so get parameters
            # to delegate action.
            http_serve = False
            log("Server already listening on port %i..." % config.listening_port)
            log("Use TOKEN = %s" % config.use_token)
            if config.use_token and not config.token.sync():
                os._exit(os.EX_OSFILE)


        if config.debuging and config.use_token:
            log("token_filename           : %s" % config.token.filename)
            log("token                    : %s" % config.token.get())

        # Open GUI.
        if config.run_gui:
            launch_gui (config)

        # Process only if not already in use..
        if http_serve:
            httpd.serve_forever()

    except KeyboardInterrupt:
        log('End asked by user...bye bye !')
    except EndException as ee:
        log(ee.value)
    except:
        print("Unexpected error:", sys.exc_info()[0])
    finally:
        log("Waiting end of process")
        time.sleep(2)





if __name__ == '__main__':

    # Process passed arguments.
    try:
        import argparse
        parser = argparse.ArgumentParser(
            description='Notify processor.',
            )
        USING_ARGPARSE = True
    except ImportError:
        import optparse
        parser = optparse.OptionParser(
            description='PYthon Alert Processor.')
        parser.parse_args_orig = parser.parse_args
        parser.parse_args = lambda: parser.parse_args_orig()[0]
        parser.add_argument = parser.add_option
        USING_ARGPARSE = False

    parser.add_argument('--conf', '-c',
                        help='Configuration file.')
    parser.add_argument('--port', '-p', default=config.listening_port, type=int,
                        help='Listening port for status push .')
    parser.add_argument('--verbose', '-v', action='store_true',
                        help='verbose.')
    parser.add_argument('--debug', '-d', action='store_true',
                        help='Debug mode.')
    parser.add_argument('--debugfilename', default=None,
                        help='Debug file name mode.')
    parser.add_argument('--daemon', action='store_true',
                        help='Enable daemon mode.')
    parser.add_argument('--pid', action='store_true',
                        help='Write pid file (see --pidfile)')
    parser.add_argument('--pidfile', default='/var/run/pyap.pid',
                        help='Set the pid file.')
    parser.add_argument('--documentroot', '-D', default=None,
                        help='Document root for static web pages.')
    parser.add_argument('--remotelist', '-R', default=None,
                        help='Url to json remote list')
    parser.add_argument('--menuconf', '-M', default=None,
                        help='Url to json menu configuration')
    parser.add_argument('--remotecnx', '-C', default=None,
                        help='Remote connection script')
    parser.add_argument('--notoken', action='store_true',
                        help='Unsafe mode without token.')
    parser.add_argument('--nogui', action='store_true',
                        help='Launch grahical user interface')
    parser.add_argument('--webbrowser', default=None,
            help='Select web browser (default: %s)' % config.webbrowser)

    args = parser.parse_args()


    if args.daemon:
        # do the UNIX double-fork magic, see Stevens' "Advanced
        # Programming in the UNIX Environment" for details (ISBN 0201563177)
        if args.debug or args.verbose:
            log('Running daemon mode.')

        if os.fork() > 0:
            sys.exit(0)

        # Decouple from parent environment
        os.chdir('/')
        os.setsid()
        # TODO os.umask()
        # Redirect the standard I/O file descriptors to /dev/null
        if hasattr(os, "devnull"):
            REDIRECT_TO = os.devnull
        else:
            REDIRECT_TO = "/dev/null"

        fd = os.open(REDIRECT_TO, os.O_RDWR)
        os.dup2(fd, 0)  # standard input (0)
        os.dup2(fd, 1)  # standard output (1)
        os.dup2(fd, 2)  # standard error (2)

        # Double-fork magic must be single-fork for systemd
        # TODO: test under centos6 using init.
        # if os.fork() > 0:
        #     sys.exit(0)

    # Write pid file
    if args.pid:
        with open(args.pidfile, 'w') as f:
            f.write(str(os.getpid()))

    # Run main process.
    main(args, config)

    # Remove pid file at the end of process.
    if args.pid:
        os.remove(args.pidfile)

    os._exit(os.EX_OK)
